<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.fabiankrohn</groupId>
    <artifactId>MangoPlayer</artifactId>
    <version>1.0.0</version>
    <name>MangoPlayer</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>5.10.2</junit.version>
    </properties>

    <repositories>
        <repository>
            <id>jitpack.io</id>
            <url>https://jitpack.io</url>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>23.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>23.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
            <version>23.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-swing</artifactId>
            <version>23.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-media</artifactId>
            <version>23.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.controlsfx</groupId>
            <artifactId>controlsfx</artifactId>
            <version>11.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.dlsc.formsfx</groupId>
            <artifactId>formsfx-core</artifactId>
            <version>11.6.0</version>
            <exclusions>
                <exclusion>
                    <groupId>org.openjfx</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>net.synedra</groupId>
            <artifactId>validatorfx</artifactId>
            <version>0.5.0</version>
            <exclusions>
                <exclusion>
                    <groupId>org.openjfx</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.kordamp.ikonli</groupId>
            <artifactId>ikonli-javafx</artifactId>
            <version>12.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.kordamp.bootstrapfx</groupId>
            <artifactId>bootstrapfx-core</artifactId>
            <version>0.4.0</version>
        </dependency>
        <dependency>
            <groupId>eu.hansolo</groupId>
            <artifactId>tilesfx</artifactId>
            <version>21.0.3</version>
            <exclusions>
                <exclusion>
                    <groupId>org.openjfx</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.github.almasb</groupId>
            <artifactId>fxgl</artifactId>
            <version>17.3</version>
            <exclusions>
                <exclusion>
                    <groupId>org.openjfx</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Utility dependency -->
        <dependency>
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
            <version>24.0.0</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.github.redstonemango</groupId>
            <artifactId>mango-utils</artifactId>
            <version>2.0.1</version>
        </dependency>

        <!-- Json dependency -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.11.0</version>
        </dependency>

        <!-- MP3 dependency -->
        <dependency>
            <groupId>com.github.Adonai</groupId>
            <artifactId>jaudiotagger</artifactId>
            <version>2.3.14</version>
        </dependency>

        <!-- Markdown dependency -->
        <dependency>
            <groupId>org.commonmark</groupId>
            <artifactId>commonmark</artifactId>
            <version>0.24.0</version>
        </dependency>

        <!-- Native hook dependency -->
        <dependency>
            <groupId>com.github.kwhat</groupId>
            <artifactId>jnativehook</artifactId>
            <version>2.2.1</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>23</source>
                    <target>23</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <executions>
                    <execution>
                        <!-- Default configuration for running with: mvn clean javafx:run -->
                        <id>default-cli</id>
                        <configuration>
                            <mainClass>io.github.redstonemango.mangoplayer.graphic.MangoPlayer</mainClass>
                            <launcher>app</launcher>
                            <jlinkZipName>app</jlinkZipName>
                            <jlinkImageName>app</jlinkImageName>
                            <noManPages>true</noManPages>
                            <stripDebug>true</stripDebug>
                            <noHeaderFiles>true</noHeaderFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <?ignore
                        This plugin (-configuration) allows you to build (os-dependent) application executeables out of your project.
                        ---------------
                        All predefined paramaters, you could edit are described using a comment above them.
                        "mainClass" parameter has to be set  in order for the plugin to work.
                        Whole documentation on possible parameters: https://github.com/fvarrui/JavaPackager/tree/master?tab=readme-ov-file#plugin-configuration-properties
                        ---------------
                        To use a custom application icon, paste the image file to "./assets/linux/APPLICATION_NAME.png", "./assets/windows/APPLICATION_NAME.ico", "./assets/mac/APPLICATION_NAME.icns"
                        APPLICATION_NAME has to be the exact name defined in "name" tag below
                        ---------------
                        Execute "mvn package" to create the executeable based under "./target"
                        Execute "mvn clean" to remove unnecessary built modules from "./" (including whole "./target")
                        Execute "mvn clean package" to remove older builds and build new ones
                        ?>
                <groupId>io.github.fvarrui</groupId>
                <artifactId>javapackager</artifactId>
                <version>1.7.6</version>
                <configuration>
                    <bundleJre>true</bundleJre>
                    <copyDependencies>true</copyDependencies>
                    <!-- Here the main class has to be specified -->
                    <mainClass>io.github.redstonemango.mangoplayer.graphic.MangoPlayer</mainClass>
                    <!-- Here the application's name has to be specified -->
                    <name>MangoPlayer</name>
                    <!-- Here has to be specified if installers (eg *.deb) should generate in addition to the executable file -->
                    <generateInstaller>true</generateInstaller>
                    <!-- Here the application's description has to be specified -->
                    <description>Play music easily using this lightweight music player. MangoPlayer includes all the classic audio playback features you expect, plus optional integration with tools like yt-dlp for downloading audio directly from YouTube.</description>
                    <!-- Here the application's dev organization (vendor) has to be specified -->
                    <organizationName>RedStoneMango</organizationName>
                    <!-- Here the application's license file has to be specified -->
                    <licenseFile>LICENSE.txt</licenseFile>
                    <!-- Here the used JavaFX modules have to be specified (eg 'javafx.base'). Remove if no JFX is used -->
                    <additionalModules>
                        <additionalModule>javafx.controls</additionalModule>
                        <additionalModule>javafx.fxml</additionalModule>
                        <additionalModule>javafx.media</additionalModule>
                        <additionalModule>javafx.web</additionalModule>
                    </additionalModules>

                </configuration>
                <executions>
                    <?ignore
                            Below there are lines commented out because they run the packageing process for the other OSs (like windows).
                            Therefore they need the JDK (and probably also JavaFX jMods) for the curresponding OS to be definied, what would be to annoying if
                            it has to be donwloaded just for personal testing purposes

                            Uncommend below lines using "Cmd+Shift+/" (/ on numpad)
                            ?>
                    <execution>
                        <id>bundling-for-linux</id>
                        <phase>package</phase>
                        <goals>
                            <goal>package</goal>
                        </goals>
                        <configuration>
                            <platform>linux</platform>
                            <jdkPath>~/.jdks/openjdk-23.0.2</jdkPath>
                            <!-- Here the path to the linux JavaFX-jMods has to be specified. Remove if no JFX is used -->
                            <additionalModulePaths>
                                <modulePath>~/.jmods/javafx-jmods-23.0.2</modulePath>
                            </additionalModulePaths>
                        </configuration>
                    </execution>
                    <!--<execution>
                        <id>bundling-for-windows</id>
                        <phase>package</phase>
                        <goals>
                            <goal>package</goal>
                        </goals>
                        <configuration>
                            <platform>windows</platform>
                            <jdkPath>[...]</jdkPath>
                            &lt;!&ndash; Here the path to the Windows JavaFX-jMods has to be specified. Remove if no JFX is used &ndash;&gt;
                            <additionalModulePaths>
                                <modulePath>[...]</modulePath>
                            </additionalModulePaths>
                        </configuration>
                    </execution>-->
                    <!--<execution>
                        <id>bundling-for-macos</id>
                        <phase>package</phase>
                        <goals>
                            <goal>package</goal>
                        </goals>
                        <configuration>
                            <platform>mac</platform>
                            &lt;!&ndash; Here the path to the macOS JDK has to be specified &ndash;&gt;
                            <jdkPath>[...]</jdkPath>
                            &lt;!&ndash; Here the path to the macOS JavaFX-jMods has to be specified. Remove if no JFX is used &ndash;&gt;
                            <additionalModulePaths>
                                <modulePath>[...]</modulePath>
                            </additionalModulePaths>
                        </configuration>
                    </execution>-->
                </executions>
            </plugin>
        </plugins>
    </build>
</project>