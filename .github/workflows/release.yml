name: Build and Release Native Packages

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (Semantic version, e.g. 1.2.3)'
        required: true
        type: string
      notes:
        description: 'Release notes'
        required: false
        type: string

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64

    outputs:
      release_notes: ${{ steps.set_release_notes.outputs.release_notes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 23 with JavaFX
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Download JavaFX JMods 24.0.1
        run: |
          OS="${{ matrix.os }}"
          ARCH="${{ matrix.arch }}"

          case "$OS" in
            ubuntu-latest)
              if [ "$ARCH" = "arm64" ]; then
                JFX_URL="https://download2.gluonhq.com/openjfx/24.0.1/openjfx-24.0.1_linux-aarch64_bin-jmods.zip"
              else
                JFX_URL="https://download2.gluonhq.com/openjfx/24.0.1/openjfx-24.0.1_linux-x64_bin-jmods.zip"
              fi
              ;;
            macos-latest)
              if [ "$ARCH" = "arm64" ]; then
                JFX_URL="https://download2.gluonhq.com/openjfx/24.0.1/openjfx-24.0.1_osx-aarch64_bin-jmods.zip"
              else
                JFX_URL="https://download2.gluonhq.com/openjfx/24.0.1/openjfx-24.0.1_osx-x64_bin-jmods.zip"
              fi
              ;;
            windows-latest)
              JFX_URL="https://download2.gluonhq.com/openjfx/24.0.1/openjfx-24.0.1_windows-x64_bin-jmods.zip"
              ;;
            *)
              echo "Unsupported OS: $OS"
              exit 1
              ;;
          esac

          echo "Downloading JavaFX JMods from $JFX_URL"
          curl -L "$JFX_URL" -o javafx-jmods.zip
          unzip javafx-jmods.zip -d javafx-jmods
          JMODS_DIR_NAME="javafx-jmods-24.0.1"
          echo "JAVAFX_JMODS_DIR=$(pwd)/javafx-jmods/$JMODS_DIR_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Set release notes fallback
        id: set_release_notes
        run: |
          if [ -z "${NOTES}" ]; then
            echo "release_notes=Automatically published release" >> $GITHUB_OUTPUT
          else
            echo "release_notes=${NOTES}" >> $GITHUB_OUTPUT
          fi
        env:
          NOTES: ${{ github.event.inputs.notes }}
        shell: bash

      - name: Determine platform name
        run: |
          case "${{ matrix.os }}" in
            ubuntu-latest) echo "PACKAGE_PLATFORM=linux" ;; 
            macos-latest) echo "PACKAGE_PLATFORM=mac" ;; 
            windows-latest) echo "PACKAGE_PLATFORM=windows" ;; 
          esac >> $GITHUB_ENV
        shell: bash

      - name: Package Native Executable
        run: |
          VERSION="${{ github.event.inputs.version }}"
          mvn clean package \
            -Drevision="$VERSION" \
            -Djdk.path="$JAVA_HOME" \
            -Dpackage.platform="$PACKAGE_PLATFORM" \
            -Djavafx.module.path="$JAVAFX_JMODS_DIR"
        shell: bash

      - name: Name build artifacts
        run: |
          ARCH="${{ matrix.arch }}"
          VERSION="${{ github.event.inputs.version }}"
          NAME="${{ github.event.repository.name }}"
          PLATFORM="${PACKAGE_PLATFORM}"

          # Linux
          if [ "$PLATFORM" = "linux" ]; then
            mv target/${NAME}_${VERSION}.AppImage target/${NAME}_${VERSION}_${ARCH}.AppImage || true
            mv target/${NAME}_${VERSION}.deb target/${NAME}_${VERSION}_${ARCH}.deb || true
            mv target/${NAME}_${VERSION}.rpm target/${NAME}_${VERSION}_${ARCH}.rpm || true
            mv target/${NAME}-${VERSION}-linux.zip target/${NAME}-${VERSION}-linux-${ARCH}.zip || true
            mv target/${NAME}-${VERSION}-linux.tar.gz target/${NAME}-${VERSION}-linux-${ARCH}.tar.gz || true
          fi

          # macOS
          if [ "$PLATFORM" = "mac" ]; then
            mv target/${NAME}_${VERSION}.dmg target/${NAME}_${VERSION}_${ARCH}.dmg || true
            mv target/${NAME}_${VERSION}.pkg target/${NAME}_${VERSION}_${ARCH}.pkg || true
            mv target/${NAME}-${VERSION}-mac.zip target/${NAME}-${VERSION}-mac-${ARCH}.zip || true
            mv target/${NAME}-${VERSION}-mac.tar.gz target/${NAME}-${VERSION}-mac-${ARCH}.tar.gz || true
          fi

          # Windows
          if [ "$PLATFORM" = "windows" ]; then
            mv target/${NAME}_${VERSION}.exe target/${NAME}_${VERSION}_${ARCH}.exe || true
            mv target/${NAME}_${VERSION}.msi target/${NAME}_${VERSION}_${ARCH}.msi || true
            mv target/${NAME}_${VERSION}.msm target/${NAME}_${VERSION}_${ARCH}.msm || true
            mv target/${NAME}-${VERSION}-windows.zip target/${NAME}-${VERSION}-windows-${ARCH}.zip || true
            mv target/${NAME}-${VERSION}-windows.tar.gz target/${NAME}-${VERSION}-windows-${ARCH}.tar.gz || true
          fi
        shell: bash

      - name: Upload Linux Artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-${{ matrix.arch }}
          path: |
            target/${{ github.event.repository.name }}_*.AppImage
            target/${{ github.event.repository.name }}_*.deb
            target/${{ github.event.repository.name }}_*.rpm
            target/${{ github.event.repository.name }}-*-linux-*.zip
            target/${{ github.event.repository.name }}-*-linux-*.tar.gz

      - name: Upload macOS Artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-mac-${{ matrix.arch }}
          path: |
            target/${{ github.event.repository.name }}_*.dmg
            target/${{ github.event.repository.name }}_*.pkg
            target/${{ github.event.repository.name }}-*-mac-*.zip
            target/${{ github.event.repository.name }}-*-mac-*.tar.gz

      - name: Upload Windows Artifacts
        if: matrix.os == 'windows-latest' && matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: build-windows-x64
          path: |
            target/${{ github.event.repository.name }}_*.exe
            target/${{ github.event.repository.name }}_*.msi
            target/${{ github.event.repository.name }}_*.msm
            target/${{ github.event.repository.name }}-*-windows-*.zip
            target/${{ github.event.repository.name }}-*-windows-*.tar.gz

  publish:
    name: Create GitHub Release with Native Packages
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          body: ${{ needs.build.outputs.release_notes }}
          draft: false
          prerelease: false
          files: all_artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
